{
  "kind": "discovery#restDescription",
  "discoveryVersion": "v1",
  "id": "datapol:v1alpha1",
  "name": "datapol",
  "canonicalName": "Cloud Datapol",
  "version": "v1alpha1",
  "revision": "0",
  "title": "Google Cloud Datapol API",
  "description": "Google Cloud Datapol API.",
  "ownerDomain": "google.com",
  "ownerName": "Google",
  "icons": {
    "x16": "http://www.google.com/images/icons/product/search-16.gif",
    "x32": "http://www.google.com/images/icons/product/search-32.gif"
   },
  "documentationLink": "",
  "protocol": "rest",
  "rootUrl": "https://datapol.googleapis.com/",
  "servicePath": "",
  "baseUrl": "https://datapol.googleapis.com/",
  "batchPath": "batch",
  "version_module": "True",
  "parameters": {
    "access_token": {
      "type": "string",
      "description": "OAuth access token.",
      "location": "query"
    },
    "alt": {
      "type": "string",
      "description": "Data format for response.",
      "default": "json",
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "location": "query"
    },
    "bearer_token": {
      "type": "string",
      "description": "OAuth bearer token.",
      "location": "query"
    },
    "callback": {
      "type": "string",
      "description": "JSONP",
      "location": "query"
    },
    "fields": {
      "type": "string",
      "description": "Selector specifying which fields to include in a partial response.",
      "location": "query"
    },
    "key": {
      "type": "string",
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
      "location": "query"
    },
    "oauth_token": {
      "type": "string",
      "description": "OAuth 2.0 token for the current user.",
      "location": "query"
    },
    "pp": {
      "type": "boolean",
      "description": "Pretty-print response.",
      "default": "true",
      "location": "query"
    },
    "prettyPrint": {
      "type": "boolean",
      "description": "Returns response with indentations and line breaks.",
      "default": "true",
      "location": "query"
    },
    "quotaUser": {
      "type": "string",
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
      "location": "query"
    },
    "upload_protocol": {
      "type": "string",
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
      "location": "query"
    },
    "uploadType": {
      "type": "string",
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
      "location": "query"
    },
    "$.xgafv": {
      "type": "string",
      "description": "V1 error format.",
      "enum": [
        "1",
        "2"
      ],
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "location": "query"
    }
  },
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/cloud-platform": {
          "description": "View and manage your data across Google Cloud Platform services"
        },
        "https://www.googleapis.com/auth/xapi.zoo": {
          "description": "Test scope for access to the Zoo service"
        }
      }
    }
  },
  "schemas": {
    "PolicyTaxonomy": {
      "id": "PolicyTaxonomy",
      "description": "A taxonomy in DataPolicy API. A taxonomy is a set of data types of business\nsignificance, typically associated with the substance of the data (e.g.\ncredit card, SSN), or how it is used (e.g. account name, user ID). There are\nthree IAM roles on each taxonomy:\n  - role\/administrator: use all service APIs above.\n  - role\/annotator: use all APIs in service DataPolicyAnnotationTagging, and\n      Get* APIs in service DataPolicyTaxonomy and DataPolicyAnnotation.\n  - role\/reader: use Get* and List* APIs.\nWhen a PolicyTaxonomy is created, the API caller will be added to each of\nthose IAM roles above..",
      "type": "object",
      "properties": {
        "name": {
          "description": "Resource name of the datapol taxonomy, which has the format of\n\"orgs\/{org_id}\/policyTaxonomies\/{taxonomy_name}\".",
          "type": "string"
        },
        "orgId": {
          "description": "Id of the cloud organization that this taxonomy belongs to. If the project\ndoes not have an organization ID, use the \"project:project_id\" instead, and\nthe scope of the defined taxonomy is limited to this project only.",
          "type": "string"
        },
        "taxonomyName": {
          "description": "Name of the taxonomy. Should be no more than 100 characters with only\nletters, numbers, -, and _.",
          "type": "string"
        },
        "description": {
          "description": "Description of the datapol taxonomy. Length of the description is limited\nto 1000 characters.",
          "type": "string"
        }
      }
    },
    "Operation": {
      "id": "Operation",
      "description": "This resource represents a long-running operation that is the result of a\nnetwork API call.",
      "type": "object",
      "properties": {
        "name": {
          "description": "The server-assigned name, which is only unique within the same service that\noriginally returns it. If you use the default HTTP mapping, the\n`name` should have the format of `operations\/some\/unique\/name`.",
          "type": "string"
        },
        "metadata": {
          "description": "Service-specific metadata associated with the operation.  It typically\ncontains progress information and common metadata such as create time.\nSome services might not provide such metadata.  Any method that returns a\nlong-running operation should document the metadata type, if any.",
          "type": "object",
          "additionalProperties": {
            "type": "any",
            "description": "Properties of the object. Contains field @type with type URL."
          }
        },
        "done": {
          "description": "If the value is `false`, it means the operation is still in progress.\nIf true, the operation is completed, and either `error` or `response` is\navailable.",
          "type": "boolean"
        },
        "error": {
          "description": "The error result of the operation in case of failure or cancellation.",
          "$ref": "Status"
        },
        "response": {
          "description": "The normal response of the operation in case of success.  If the original\nmethod returns no data on success, such as `Delete`, the response is\n`google.protobuf.Empty`.  If the original method is standard\n`Get`\/`Create`\/`Update`, the response should be the resource.  For other\nmethods, the response should have the type `XxxResponse`, where `Xxx`\nis the original method name.  For example, if the original method name\nis `TakeSnapshot()`, the inferred response type is\n`TakeSnapshotResponse`.",
          "type": "object",
          "additionalProperties": {
            "type": "any",
            "description": "Properties of the object. Contains field @type with type URL."
          }
        }
      }
    },
    "Status": {
      "id": "Status",
      "description": "The `Status` type defines a logical error model that is suitable for different\nprogramming environments, including REST APIs and RPC APIs. It is used by\n[gRPC](https:\/\/github.com\/grpc). The error model is designed to be:\n\n- Simple to use and understand for most users\n- Flexible enough to meet unexpected needs\n\n# Overview\n\nThe `Status` message contains three pieces of data: error code, error message,\nand error details. The error code should be an enum value of\ngoogle.rpc.Code, but it may accept additional error codes if needed.  The\nerror message should be a developer-facing English message that helps\ndevelopers *understand* and *resolve* the error. If a localized user-facing\nerror message is needed, put the localized message in the error details or\nlocalize it in the client. The optional error details may contain arbitrary\ninformation about the error. There is a predefined set of error detail types\nin the package `google.rpc` which can be used for common error conditions.\n\n# Language mapping\n\nThe `Status` message is the logical representation of the error model, but it\nis not necessarily the actual wire format. When the `Status` message is\nexposed in different client libraries and different wire protocols, it can be\nmapped differently. For example, it will likely be mapped to some exceptions\nin Java, but more likely mapped to some error codes in C.\n\n# Other uses\n\nThe error model and the `Status` message can be used in a variety of\nenvironments, either with or without APIs, to provide a\nconsistent developer experience across different environments.\n\nExample uses of this error model include:\n\n- Partial errors. If a service needs to return partial errors to the client,\n    it may embed the `Status` in the normal response to indicate the partial\n    errors.\n\n- Workflow errors. A typical workflow has multiple steps. Each step may\n    have a `Status` message for error reporting purpose.\n\n- Batch operations. If a client uses batch request and batch response, the\n    `Status` message should be used directly inside batch response, one for\n    each error sub-response.\n\n- Asynchronous operations. If an API call embeds asynchronous operation\n    results in its response, the status of those operations should be\n    represented directly using the `Status` message.\n\n- Logging. If some API errors are stored in logs, the message `Status` could\n    be used directly after any stripping needed for security\/privacy reasons.",
      "type": "object",
      "properties": {
        "code": {
          "description": "The status code, which should be an enum value of google.rpc.Code.",
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "description": "A developer-facing error message, which should be in English. Any\nuser-facing error message should be localized and sent in the\ngoogle.rpc.Status.details field, or localized by the client.",
          "type": "string"
        },
        "details": {
          "description": "A list of messages that carry the error details.  There will be a\ncommon set of message types for APIs to use.",
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": {
              "type": "any",
              "description": "Properties of the object. Contains field @type with type URL."
            }
          }
        }
      }
    },
    "ListPolicyTaxonomiesResponse": {
      "id": "ListPolicyTaxonomiesResponse",
      "description": "Response message for \"DataPolicyTaxonomy.ListPolicyTaxonomies\".",
      "type": "object",
      "properties": {
        "taxonomies": {
          "description": "Taxonomies that the org owns.",
          "type": "array",
          "items": {
            "$ref": "PolicyTaxonomy"
          }
        },
        "nextPageToken": {
          "description": "Token to retrieve the next page of results, or empty if there are no\nmore results in the list.",
          "type": "string"
        }
      }
    },
    "GetIamPolicyRequest": {
      "id": "GetIamPolicyRequest",
      "description": "Request message for `GetIamPolicy` method.",
      "type": "object",
      "properties": {
      }
    },
    "Policy": {
      "id": "Policy",
      "description": "Defines an Identity and Access Management (IAM) policy. It is used to\nspecify access control policies for Cloud Platform resources.\n\n\nA `Policy` consists of a list of `bindings`. A `Binding` binds a list of\n`members` to a `role`, where the members can be user accounts, Google groups,\nGoogle domains, and service accounts. A `role` is a named list of permissions\ndefined by IAM.\n\n**Example**\n\n    {\n      \"bindings\": [\n        {\n          \"role\": \"roles\/owner\",\n          \"members\": [\n            \"user:mike@example.com\",\n            \"group:admins@example.com\",\n            \"domain:google.com\",\n            \"serviceAccount:my-other-app@appspot.gserviceaccount.com\",\n          ]\n        },\n        {\n          \"role\": \"roles\/viewer\",\n          \"members\": [\"user:sean@example.com\"]\n        }\n      ]\n    }\n\nFor a description of IAM and its features, see the\n[IAM developer's guide](https:\/\/cloud.google.com\/iam).",
      "type": "object",
      "properties": {
        "version": {
          "description": "Version of the `Policy`. The default version is 0.",
          "type": "integer",
          "format": "int32"
        },
        "bindings": {
          "description": "Associates a list of `members` to a `role`.\nMultiple `bindings` must not be specified for the same `role`.\n`bindings` with no members will result in an error.",
          "type": "array",
          "items": {
            "$ref": "Binding"
          }
        },
        "auditConfigs": {
          "description": "Specifies cloud audit logging configuration for this policy.",
          "type": "array",
          "items": {
            "$ref": "AuditConfig"
          }
        },
        "rules": {
          "description": "If more than one rule is specified, the rules are applied in the following\nmanner:\n- All matching LOG rules are always applied.\n- If any DENY\/DENY_WITH_LOG rule matches, permission is denied.\n  Logging will be applied if one or more matching rule requires logging.\n- Otherwise, if any ALLOW\/ALLOW_WITH_LOG rule matches, permission is\n  granted.\n  Logging will be applied if one or more matching rule requires logging.\n- Otherwise, if no rule applies, permission is denied.",
          "type": "array",
          "items": {
            "$ref": "Rule"
          }
        },
        "etag": {
          "description": "`etag` is used for optimistic concurrency control as a way to help\nprevent simultaneous updates of a policy from overwriting each other.\nIt is strongly suggested that systems make use of the `etag` in the\nread-modify-write cycle to perform policy updates in order to avoid race\nconditions: An `etag` is returned in the response to `getIamPolicy`, and\nsystems are expected to put that etag in the request to `setIamPolicy` to\nensure that their change will be applied to the same version of the policy.\n\nIf no `etag` is provided in the call to `setIamPolicy`, then the existing\npolicy is overwritten blindly.",
          "type": "string",
          "format": "byte"
        },
        "iamOwned": {

          "type": "boolean"
        }
      }
    },
    "Binding": {
      "id": "Binding",
      "description": "Associates `members` with a `role`.",
      "type": "object",
      "properties": {
        "role": {
          "description": "Role that is assigned to `members`.\nFor example, `roles\/viewer`, `roles\/editor`, or `roles\/owner`.\nRequired",
          "type": "string"
        },
        "members": {
          "description": "Specifies the identities requesting access for a Cloud Platform resource.\n`members` can have the following values:\n\n* `allUsers`: A special identifier that represents anyone who is\n   on the internet; with or without a Google account.\n\n* `allAuthenticatedUsers`: A special identifier that represents anyone\n   who is authenticated with a Google account or a service account.\n\n* `user:{emailid}`: An email address that represents a specific Google\n   account. For example, `alice@gmail.com` or `joe@example.com`.\n\n\n* `serviceAccount:{emailid}`: An email address that represents a service\n   account. For example, `my-other-app@appspot.gserviceaccount.com`.\n\n* `group:{emailid}`: An email address that represents a Google group.\n   For example, `admins@example.com`.\n\n* `domain:{domain}`: A Google Apps domain name that represents all the\n   users of that domain. For example, `google.com` or `example.com`.\n\n",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "AuditConfig": {
      "id": "AuditConfig",
      "description": "Specifies the audit configuration for a service.\nThe configuration determines which permission types are logged, and what\nidentities, if any, are exempted from logging.\nAn AuditConifg must have one or more AuditLogConfigs.\n\nIf there are AuditConfigs for both `allServices` and a specific service,\nthe union of the two AuditConfigs is used for that service: the log_types\nspecified in each AuditConfig are enabled, and the exempted_members in each\nAuditConfig are exempted.\nExample Policy with multiple AuditConfigs:\n{\n  \"audit_configs\": [\n    {\n      \"service\": \"allServices\"\n      \"audit_log_configs\": [\n        {\n          \"log_type\": \"DATA_READ\",\n          \"exempted_members\": [\n            \"user:foo@gmail.com\"\n          ]\n        },\n        {\n          \"log_type\": \"DATA_WRITE\",\n        },\n        {\n          \"log_type\": \"ADMIN_READ\",\n        }\n      ]\n    },\n    {\n      \"service\": \"fooservice@googleapis.com\"\n      \"audit_log_configs\": [\n        {\n          \"log_type\": \"DATA_READ\",\n        },\n        {\n          \"log_type\": \"DATA_WRITE\",\n          \"exempted_members\": [\n            \"user:bar@gmail.com\"\n          ]\n        }\n      ]\n    }\n  ]\n}\nFor fooservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ\nlogging. It also exempts foo@gmail.com from DATA_READ logging, and\nbar@gmail.com from DATA_WRITE logging.",
      "type": "object",
      "properties": {
        "service": {
          "description": "Specifies a service that will be enabled for audit logging.\nFor example, `storage.googleapis.com`, `cloudsql.googleapis.com`.\n`allServices` is a special value that covers all services.",
          "type": "string"
        },
        "exemptedMembers": {

          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "auditLogConfigs": {
          "description": "The configuration for logging of each type of permission.\nNext ID: 4",
          "type": "array",
          "items": {
            "$ref": "AuditLogConfig"
          }
        }
      }
    },
    "AuditLogConfig": {
      "id": "AuditLogConfig",
      "description": "Provides the configuration for logging a type of permissions.\nExample:\n\n    {\n      \"audit_log_configs\": [\n        {\n          \"log_type\": \"DATA_READ\",\n          \"exempted_members\": [\n            \"user:foo@gmail.com\"\n          ]\n        },\n        {\n          \"log_type\": \"DATA_WRITE\",\n        }\n      ]\n    }\n\nThis enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting\nfoo@gmail.com from DATA_READ logging.",
      "type": "object",
      "properties": {
        "logType": {
          "description": "The log type that this config enables.",
          "enumDescriptions": [
            "Default case. Should never be this.",
            "Admin reads. Example: CloudIAM getIamPolicy",
            "Data writes. Example: CloudSQL Users create",
            "Data reads. Example: CloudSQL Users list"
          ],
          "type": "string",
          "enum": [
            "LOG_TYPE_UNSPECIFIED",
            "ADMIN_READ",
            "DATA_WRITE",
            "DATA_READ"
          ]
        },
        "exemptedMembers": {
          "description": "Specifies the identities that do not cause logging for this type of\npermission.\nFollows the same format of Binding.members.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "Rule": {
      "id": "Rule",
      "description": "A rule to be applied in a Policy.",
      "type": "object",
      "properties": {
        "description": {
          "description": "Human-readable description of the rule.",
          "type": "string"
        },
        "permissions": {
          "description": "A permission is a string of form '<service>.<resource type>.<verb>'\n(e.g., 'storage.buckets.list'). A value of '*' matches all permissions,\nand a verb part of '*' (e.g., 'storage.buckets.*') matches all verbs.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "action": {
          "description": "Required",
          "enumDescriptions": [
            "Default no action.",
            "Matching 'Entries' grant access.",
            "Matching 'Entries' grant access and the caller promises to log\nthe request per the returned log_configs.",
            "Matching 'Entries' deny access.",
            "Matching 'Entries' deny access and the caller promises to log\nthe request per the returned log_configs.",
            "Matching 'Entries' tell IAM.Check callers to generate logs."
          ],
          "type": "string",
          "enum": [
            "NO_ACTION",
            "ALLOW",
            "ALLOW_WITH_LOG",
            "DENY",
            "DENY_WITH_LOG",
            "LOG"
          ]
        },
        "in": {
          "description": "If one or more 'in' clauses are specified, the rule matches if\nthe PRINCIPAL\/AUTHORITY_SELECTOR is in at least one of these entries.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "notIn": {
          "description": "If one or more 'not_in' clauses are specified, the rule matches\nif the PRINCIPAL\/AUTHORITY_SELECTOR is in none of the entries.\nThe format for in and not_in entries is the same as for members in a\nBinding (see google\/iam\/v1\/policy.proto).",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "conditions": {
          "description": "Additional restrictions that must be met",
          "type": "array",
          "items": {
            "$ref": "Condition"
          }
        },
        "logConfig": {
          "description": "The config returned to callers of tech.iam.IAM.CheckPolicy for any entries\nthat match the LOG action.",
          "type": "array",
          "items": {
            "$ref": "LogConfig"
          }
        }
      }
    },
    "Condition": {
      "id": "Condition",
      "description": "A condition to be met.",
      "type": "object",
      "properties": {
        "iam": {
          "description": "Trusted attributes supplied by the IAM system.",
          "enumDescriptions": [
            "Default non-attribute.",
            "Either principal or (if present) authority selector.",
            "The principal (even if an authority selector is present), which\nmust only be used for attribution, not authorization.",
            "Any of the security realms in the IAMContext (go\/security-realms).\nWhen used with IN, the condition indicates \"any of the request's realms\nmatch one of the given values; with NOT_IN, \"none of the realms match\nany of the given values\". It is not permitted to grant access based on\nthe *absence* of a realm, so realm conditions can only be used in\na \"positive\" context (e.g., ALLOW\/IN or DENY\/NOT_IN).",
            "An approver (distinct from the requester) that has authorized this\nrequest.\nWhen used with IN, the condition indicates that one of the approvers\nassociated with the request matches the specified principal, or is a\nmember of the specified group. Approvers can only grant additional\naccess, and are thus only used in a strictly positive context\n(e.g. ALLOW\/IN or DENY\/NOT_IN).\nSee: go\/rpc-security-policy-dynamicauth.",
            "What types of justifications have been supplied with this request.\nString values should match enum names from tech.iam.JustificationType,\ne.g. \"MANUAL_STRING\". It is not permitted to grant access based on\nthe *absence* of a justification, so justification conditions can only\nbe used in a \"positive\" context (e.g., ALLOW\/IN or DENY\/NOT_IN).\n\nMultiple justifications, e.g., a Buganizer ID and a manually-entered\nreason, are normal and supported."
          ],
          "type": "string",
          "enum": [
            "NO_ATTR",
            "AUTHORITY",
            "ATTRIBUTION",
            "SECURITY_REALM",
            "APPROVER",
            "JUSTIFICATION_TYPE"
          ]
        },
        "sys": {
          "description": "Trusted attributes supplied by any service that owns resources and uses\nthe IAM system for access control.",
          "enumDescriptions": [
            "Default non-attribute type",
            "Region of the resource",
            "Service name",
            "Resource name",
            "IP address of the caller"
          ],
          "type": "string",
          "enum": [
            "NO_ATTR",
            "REGION",
            "SERVICE",
            "NAME",
            "IP"
          ]
        },
        "svc": {
          "description": "Trusted attributes discharged by the service.",
          "type": "string"
        },
        "op": {
          "description": "An operator to apply the subject with.",
          "enumDescriptions": [
            "Default no-op.",
            "DEPRECATED. Use IN instead.",
            "DEPRECATED. Use NOT_IN instead.",
            "The condition is true if the subject (or any element of it if it is\na set) matches any of the supplied values.",
            "The condition is true if the subject (or every element of it if it is\na set) matches none of the supplied values.",
            "Subject is discharged"
          ],
          "type": "string",
          "enum": [
            "NO_OP",
            "EQUALS",
            "NOT_EQUALS",
            "IN",
            "NOT_IN",
            "DISCHARGED"
          ]
        },
        "value": {
          "description": "DEPRECATED. Use 'values' instead.",
          "type": "string"
        },
        "values": {
          "description": "The objects of the condition. This is mutually exclusive with 'value'.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "LogConfig": {
      "id": "LogConfig",
      "description": "Specifies what kind of log the caller must write",
      "type": "object",
      "properties": {
        "counter": {
          "description": "Counter options.",
          "$ref": "CounterOptions"
        },
        "dataAccess": {
          "description": "Data access options.",
          "$ref": "DataAccessOptions"
        },
        "cloudAudit": {
          "description": "Cloud audit options.",
          "$ref": "CloudAuditOptions"
        }
      }
    },
    "CounterOptions": {
      "id": "CounterOptions",
      "description": "Options for counters",
      "type": "object",
      "properties": {
        "metric": {
          "description": "The metric to update.",
          "type": "string"
        },
        "field": {
          "description": "The field value to attribute.",
          "type": "string"
        }
      }
    },
    "DataAccessOptions": {
      "id": "DataAccessOptions",
      "description": "Write a Data Access (Gin) log",
      "type": "object",
      "properties": {
      }
    },
    "CloudAuditOptions": {
      "id": "CloudAuditOptions",
      "description": "Write a Cloud Audit log",
      "type": "object",
      "properties": {
      }
    },
    "SetIamPolicyRequest": {
      "id": "SetIamPolicyRequest",
      "description": "Request message for `SetIamPolicy` method.",
      "type": "object",
      "properties": {
        "policy": {
          "description": "REQUIRED: The complete policy to be applied to the `resource`. The size of\nthe policy is limited to a few 10s of KB. An empty policy is a\nvalid policy but certain Cloud Platform services (such as Projects)\nmight reject them.",
          "$ref": "Policy"
        },
        "updateMask": {
          "description": "OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only\nthe fields in the mask will be modified. If no mask is provided, the\nfollowing default mask is used:\npaths: \"bindings, etag\"\nThis field is only used by Cloud IAM.",
          "type": "string",
          "format": "google-fieldmask"
        }
      }
    },
    "Annotation": {
      "id": "Annotation",
      "description": "An annotation in Data Policy API. An annotation is one data type in a policy\ntaxonomy (e.g. ssn). Annotations can be defined in a hierarchy for at most\ntwo levels.\nFor example, consider the following hierachy:\n              Geolocation\n                   |\n  ------------------------------------\n  |                |                 |\nLatLong          City              ZipCode\nAnnotation \"Geolocation\" contains three child annotations: \"LatLong\",\n\"City\", and \"ZipCode\".",
      "type": "object",
      "properties": {
        "name": {
          "description": "Resource name of the annotation, which has the format of\n\"orgs\/{org_id}\/policyTaxonomies\/{taxonomy_name}\/annotations\/{annotation_name}\".",
          "type": "string"
        },
        "annotationName": {
          "description": "Name of the annotation. Should be no more than 100 characters with only\nletters, numbers, -, and _.",
          "type": "string"
        },
        "description": {
          "description": "Description of the annotation. Length of the description is limited\nto 1000 characters.",
          "type": "string"
        },
        "parentAnnotation": {
          "description": "Name of the parent annotation to this annotation. If empty, it means this\nannotation is a top level annotation.",
          "type": "string"
        },
        "childAnnotations": {
          "description": "Names of child annotations of this annotation.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "UpdateAnnotationRequest": {
      "id": "UpdateAnnotationRequest",
      "description": "Request message for \"DataPolicyAnnotation.UpdateAnnotation\".",
      "type": "object",
      "properties": {
        "description": {
          "description": "New description of the annotation.",
          "type": "string"
        }
      }
    },
    "ListAnnotationsResponse": {
      "id": "ListAnnotationsResponse",
      "description": "Response message for \"DataPolicyAnnotation.ListAnnotations\".",
      "type": "object",
      "properties": {
        "annotations": {
          "description": "Annotations that are in this taxonomy.",
          "type": "array",
          "items": {
            "$ref": "Annotation"
          }
        },
        "nextPageToken": {
          "description": "Token to retrieve the next page of results, or empty if there are no\nmore results in the list.",
          "type": "string"
        }
      }
    },
    "ApplyAnnotationTagRequest": {
      "id": "ApplyAnnotationTagRequest",
      "description": "Request message for \"DataPolicyAnnotationTagging.ApplyAnnotationTag\".",
      "type": "object",
      "properties": {
        "annotationName": {
          "description": "[Required] Name of the annotation tag. The annotation must be a valid\nannotation defined in the data policy taxonomy that is specified in the\nresource name.",
          "type": "string"
        }
      }
    },
    "AnnotationTag": {
      "id": "AnnotationTag",
      "description": "An annotation tag on a cloud data asset (e.g. a Cloud spanner table).\nEach data asset can have multiple annotation tags, but only one annotation\ntag from each taxonomy. An annotation tag is identified with the data asset\nit associated with, and the taxonomy that the annotation belongs to.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Resource name of the annotation tag, which has the format of\n\"data\/{resource_name_of_the_data}\/orgs\/{org_id}\/policyTaxonomies\/{taxonomy_name}\/annotationTag\"\nResouce name of the data asset should be RFC3986 escaped.",
          "type": "string"
        },
        "annotationName": {
          "description": "The value of 'annotation_name' for the tagged annotation.The annotation\nmust be a member of the taxonomy included in the resource name.",
          "type": "string"
        }
      }
    },
    "Empty": {
      "id": "Empty",
      "description": "A generic empty message that you can re-use to avoid defining duplicated\nempty messages in your APIs. A typical example is to use it as the request\nor the response type of an API method. For instance:\n\n    service Foo {\n      rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);\n    }\n\nThe JSON representation for `Empty` is empty JSON object `{}`.",
      "type": "object",
      "properties": {
      }
    },
    "ListAnnotationTagsResponse": {
      "id": "ListAnnotationTagsResponse",
      "description": "Response message for \"DataPolicyAnnotationTagging.ListAnnotationTags\".",
      "type": "object",
      "properties": {
        "tags": {
          "description": "Annotation tags on a data asset.",
          "type": "array",
          "items": {
            "$ref": "AnnotationTag"
          }
        },
        "nextPageToken": {
          "description": "Token to retrieve the next page of results, or empty if there are no\nmore results in the list.",
          "type": "string"
        }
      }
    },
    "ListAssetsResponse": {
      "id": "ListAssetsResponse",
      "description": "Response message for \"DataPolicyAnnotationTagging.ListAssets\".",
      "type": "object",
      "properties": {
        "dataAssets": {
          "description": "A list of resource names of data assets that are tagged with the given\nannotation tag.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "nextPageToken": {
          "description": "Token to retrieve the next page of results, or empty if there are no\nmore results in the list.",
          "type": "string"
        }
      }
    }
  },
  "resources": {
    "orgs": {
      "resources": {
        "policyTaxonomies": {
          "methods": {
            "create": {
              "id": "datapol.orgs.policyTaxonomies.create",
              "path": "v1alpha1/{+parent}/policyTaxonomies",
              "flatPath": "v1alpha1/orgs/{orgsId}/policyTaxonomies",
              "httpMethod": "POST",
              "description": "Creates a new data policy taxonomy.",
              "parameters": {
                "parent": {
                  "description": "[Required] Resource name of the organization that the newly created\ntaxonomy belongs to.",
                  "location": "path",
                  "required": true,
                  "pattern": "^orgs\/[^\/]+$",
                  "type": "string"
                }
              },
              "parameterOrder": [
                "parent"
              ],
              "request": {
                "$ref": "PolicyTaxonomy"
              },
              "response": {
                "$ref": "PolicyTaxonomy"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform",
                "https://www.googleapis.com/auth/xapi.zoo"
              ]
            },
            "delete": {
              "id": "datapol.orgs.policyTaxonomies.delete",
              "path": "v1alpha1/{+name}",
              "flatPath": "v1alpha1/orgs/{orgsId}/policyTaxonomies/{policyTaxonomiesId}",
              "httpMethod": "DELETE",
              "description": "Deletes a taxonomy. This operation will also delete all annotations in\nthis taxonomy.",
              "parameters": {
                "name": {
                  "description": "[Required] Resource name of the taxonomy to be deleted.",
                  "location": "path",
                  "required": true,
                  "pattern": "^orgs\/[^\/]+\/policyTaxonomies\/[^\/]+$",
                  "type": "string"
                }
              },
              "parameterOrder": [
                "name"
              ],
              "response": {
                "$ref": "Operation"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform",
                "https://www.googleapis.com/auth/xapi.zoo"
              ]
            },
            "get": {
              "id": "datapol.orgs.policyTaxonomies.get",
              "path": "v1alpha1/{+name}",
              "flatPath": "v1alpha1/orgs/{orgsId}/policyTaxonomies/{policyTaxonomiesId}",
              "httpMethod": "GET",
              "description": "Returns the taxonomy referred by name. Size of a taxonomy is at most 100KB.",
              "parameters": {
                "name": {
                  "description": "[Required] Resource name of the taxonomy to be returned.",
                  "location": "path",
                  "required": true,
                  "pattern": "^orgs\/[^\/]+\/policyTaxonomies\/[^\/]+$",
                  "type": "string"
                }
              },
              "parameterOrder": [
                "name"
              ],
              "response": {
                "$ref": "PolicyTaxonomy"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform",
                "https://www.googleapis.com/auth/xapi.zoo"
              ]
            },
            "list": {
              "id": "datapol.orgs.policyTaxonomies.list",
              "path": "v1alpha1/{+parent}/policyTaxonomies",
              "flatPath": "v1alpha1/orgs/{orgsId}/policyTaxonomies",
              "httpMethod": "GET",
              "description": "Lists all taxonomies that an org owns.",
              "parameters": {
                "parent": {
                  "description": "[Required] Resource name of a org.",
                  "location": "path",
                  "required": true,
                  "pattern": "^orgs\/[^\/]+$",
                  "type": "string"
                },
                "pageSize": {
                  "description": "The maximum number of items to return.",
                  "location": "query",
                  "type": "integer",
                  "format": "int32"
                },
                "pageToken": {
                  "description": "The next_page_token value returned from a previous List request, if any.",
                  "location": "query",
                  "type": "string"
                }
              },
              "parameterOrder": [
                "parent"
              ],
              "response": {
                "$ref": "ListPolicyTaxonomiesResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform",
                "https://www.googleapis.com/auth/xapi.zoo"
              ]
            },
            "getIamPolicy": {
              "id": "datapol.orgs.policyTaxonomies.getIamPolicy",
              "path": "v1alpha1/{+resource}:getIamPolicy",
              "flatPath": "v1alpha1/orgs/{orgsId}/policyTaxonomies/{policyTaxonomiesId}:getIamPolicy",
              "httpMethod": "POST",
              "description": "",
              "parameters": {
                "resource": {
                  "description": "REQUIRED: The resource for which the policy is being requested.\nSee the operation documentation for the appropriate value for this field.",
                  "location": "path",
                  "required": true,
                  "pattern": "^orgs\/[^\/]+\/policyTaxonomies\/[^\/]+$",
                  "type": "string"
                }
              },
              "parameterOrder": [
                "resource"
              ],
              "request": {
                "$ref": "GetIamPolicyRequest"
              },
              "response": {
                "$ref": "Policy"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform",
                "https://www.googleapis.com/auth/xapi.zoo"
              ]
            },
            "setIamPolicy": {
              "id": "datapol.orgs.policyTaxonomies.setIamPolicy",
              "path": "v1alpha1/{+resource}:setIamPolicy",
              "flatPath": "v1alpha1/orgs/{orgsId}/policyTaxonomies/{policyTaxonomiesId}:setIamPolicy",
              "httpMethod": "POST",
              "description": "",
              "parameters": {
                "resource": {
                  "description": "REQUIRED: The resource for which the policy is being specified.\nSee the operation documentation for the appropriate value for this field.",
                  "location": "path",
                  "required": true,
                  "pattern": "^orgs\/[^\/]+\/policyTaxonomies\/[^\/]+$",
                  "type": "string"
                }
              },
              "parameterOrder": [
                "resource"
              ],
              "request": {
                "$ref": "SetIamPolicyRequest"
              },
              "response": {
                "$ref": "Policy"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform",
                "https://www.googleapis.com/auth/xapi.zoo"
              ]
            }
          }
          ,
          "resources": {
            "annotations": {
              "methods": {
                "create": {
                  "id": "datapol.orgs.policyTaxonomies.annotations.create",
                  "path": "v1alpha1/{+parent}/annotations",
                  "flatPath": "v1alpha1/orgs/{orgsId}/policyTaxonomies/{policyTaxonomiesId}/annotations",
                  "httpMethod": "POST",
                  "description": "Creates an annotation in a taxonomy.",
                  "parameters": {
                    "parent": {
                      "description": "[Required] Resource name of the taxonomy that the newly created annotation\nbelongs to.",
                      "location": "path",
                      "required": true,
                      "pattern": "^orgs\/[^\/]+\/policyTaxonomies\/[^\/]+$",
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "parent"
                  ],
                  "request": {
                    "$ref": "Annotation"
                  },
                  "response": {
                    "$ref": "Annotation"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/xapi.zoo"
                  ]
                },
                "patch": {
                  "id": "datapol.orgs.policyTaxonomies.annotations.patch",
                  "path": "v1alpha1/{+name}",
                  "flatPath": "v1alpha1/orgs/{orgsId}/policyTaxonomies/{policyTaxonomiesId}/annotations/{annotationsId}",
                  "httpMethod": "PATCH",
                  "description": "Updates description of an annotation.",
                  "parameters": {
                    "name": {
                      "description": "[Required] Resource name of the annotation to be updated.",
                      "location": "path",
                      "required": true,
                      "pattern": "^orgs\/[^\/]+\/policyTaxonomies\/[^\/]+\/annotations\/[^\/]+$",
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "request": {
                    "$ref": "UpdateAnnotationRequest"
                  },
                  "response": {
                    "$ref": "Annotation"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/xapi.zoo"
                  ]
                },
                "delete": {
                  "id": "datapol.orgs.policyTaxonomies.annotations.delete",
                  "path": "v1alpha1/{+name}",
                  "flatPath": "v1alpha1/orgs/{orgsId}/policyTaxonomies/{policyTaxonomiesId}/annotations/{annotationsId}",
                  "httpMethod": "DELETE",
                  "description": "Deletes an annotation. Also deletes all member annotations if the given\nannotation is a group annotation.",
                  "parameters": {
                    "name": {
                      "description": "[Required] Resource name of the annotation to be deleted.",
                      "location": "path",
                      "required": true,
                      "pattern": "^orgs\/[^\/]+\/policyTaxonomies\/[^\/]+\/annotations\/[^\/]+$",
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "response": {
                    "$ref": "Operation"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/xapi.zoo"
                  ]
                },
                "get": {
                  "id": "datapol.orgs.policyTaxonomies.annotations.get",
                  "path": "v1alpha1/{+name}",
                  "flatPath": "v1alpha1/orgs/{orgsId}/policyTaxonomies/{policyTaxonomiesId}/annotations/{annotationsId}",
                  "httpMethod": "GET",
                  "description": "Gets definition of an annotation.",
                  "parameters": {
                    "name": {
                      "description": "[Required] Resource name of the annotation to be returned.",
                      "location": "path",
                      "required": true,
                      "pattern": "^orgs\/[^\/]+\/policyTaxonomies\/[^\/]+\/annotations\/[^\/]+$",
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "response": {
                    "$ref": "Annotation"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/xapi.zoo"
                  ]
                },
                "list": {
                  "id": "datapol.orgs.policyTaxonomies.annotations.list",
                  "path": "v1alpha1/{+parent}/annotations",
                  "flatPath": "v1alpha1/orgs/{orgsId}/policyTaxonomies/{policyTaxonomiesId}/annotations",
                  "httpMethod": "GET",
                  "description": "Lists all annotations in a taxonomy.",
                  "parameters": {
                    "parent": {
                      "description": "[Required] Resource name of a taxonomy.",
                      "location": "path",
                      "required": true,
                      "pattern": "^orgs\/[^\/]+\/policyTaxonomies\/[^\/]+$",
                      "type": "string"
                    },
                    "pageSize": {
                      "description": "The maximum number of items to return.",
                      "location": "query",
                      "type": "integer",
                      "format": "int32"
                    },
                    "pageToken": {
                      "description": "The next_page_token value returned from a previous List request, if any.",
                      "location": "query",
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "parent"
                  ],
                  "response": {
                    "$ref": "ListAnnotationsResponse"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/xapi.zoo"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "data": {
      "resources": {
        "orgs": {
          "resources": {
            "policyTaxonomies": {
              "methods": {
                "applyAnnotationTag": {
                  "id": "datapol.data.orgs.policyTaxonomies.applyAnnotationTag",
                  "path": "v1alpha1/{+name}:applyAnnotationTag",
                  "flatPath": "v1alpha1/data/{dataId}/orgs/{orgsId}/policyTaxonomies/{policyTaxonomiesId}:applyAnnotationTag",
                  "httpMethod": "POST",
                  "description": "Applies an annotation tag on a cloud data set.",
                  "parameters": {
                    "name": {
                      "description": "[Required] Resource name of the tag to be updated.",
                      "location": "path",
                      "required": true,
                      "pattern": "^data\/[^\/]+\/orgs\/[^\/]+\/policyTaxonomies\/[^\/]+$",
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "request": {
                    "$ref": "ApplyAnnotationTagRequest"
                  },
                  "response": {
                    "$ref": "AnnotationTag"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/xapi.zoo"
                  ]
                },
                "deleteAnnotationTag": {
                  "id": "datapol.data.orgs.policyTaxonomies.deleteAnnotationTag",
                  "path": "v1alpha1/{+name}",
                  "flatPath": "v1alpha1/data/{dataId}/orgs/{orgsId}/policyTaxonomies/{policyTaxonomiesId}/annotationTag",
                  "httpMethod": "DELETE",
                  "description": "Deletes an annotation tag from a cloud data set.",
                  "parameters": {
                    "name": {
                      "description": "[Required] Resource name of the tag to be deleted.",
                      "location": "path",
                      "required": true,
                      "pattern": "^data\/[^\/]+\/orgs\/[^\/]+\/policyTaxonomies\/[^\/]+\/annotationTag$",
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "response": {
                    "$ref": "Empty"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/xapi.zoo"
                  ]
                }
              }
            },
            "annotationTags": {
              "methods": {
                "list": {
                  "id": "datapol.data.orgs.annotationTags.list",
                  "path": "v1alpha1/{+parent}/annotationTags",
                  "flatPath": "v1alpha1/data/{dataId}/orgs/{orgsId}/annotationTags",
                  "httpMethod": "GET",
                  "description": "Lists all visible annotation tags on a cloud data set.",
                  "parameters": {
                    "parent": {
                      "description": "[Required] Resource name of the data asset.",
                      "location": "path",
                      "required": true,
                      "pattern": "^data\/[^\/]+\/orgs\/[^\/]+$",
                      "type": "string"
                    },
                    "pageSize": {
                      "description": "The maximum number of items to return.",
                      "location": "query",
                      "type": "integer",
                      "format": "int32"
                    },
                    "pageToken": {
                      "description": "The next_page_token value returned from a previous List request, if any.",
                      "location": "query",
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "parent"
                  ],
                  "response": {
                    "$ref": "ListAnnotationTagsResponse"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/xapi.zoo"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "dataAssets": {
      "methods": {
        "listResourceNames": {
          "id": "datapol.dataAssets.listResourceNames",
          "path": "v1alpha1/dataAssets:ListResourceNames",
          "flatPath": "v1alpha1/dataAssets:ListResourceNames",
          "httpMethod": "GET",
          "description": "Lists all cloud data assets with given predicates.",
          "parameters": {
            "annotations": {
              "description": "Resource names of annotations to be looked up.",
              "location": "query",
              "repeated": true,
              "type": "string"
            },
            "includeAnnotatedByGroup": {
              "description": "If set to true, for any group annotation, also list data assets that are\nannotated by annotation belongs to this group.",
              "location": "query",
              "type": "boolean"
            },
            "annotatableOnly": {
              "description": "If set to true, only returns data assets that are annotatable by the\ncaller.",
              "location": "query",
              "type": "boolean"
            },
            "filter": {
              "description": "A filter string that includes additional predicates for data assets.",
              "location": "query",
              "type": "string"
            },
            "pageSize": {
              "description": "The maximum number of items to return.",
              "location": "query",
              "type": "integer",
              "format": "int32"
            },
            "pageToken": {
              "description": "The next_page_token value returned from a previous List request, if any.",
              "location": "query",
              "type": "string"
            }
          },
          "parameterOrder": [
          ],
          "response": {
            "$ref": "ListAssetsResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform",
            "https://www.googleapis.com/auth/xapi.zoo"
          ]
        }
      }
    }
  },
  "basePath": ""
}