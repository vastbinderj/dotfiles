
.TH "GCLOUD_FIREBASE_TEST_ANDROID_RUN" 1



.SH "NAME"
.HP
gcloud firebase test android run \- invoke a test in Firebase Test Lab for Android and view test results



.SH "SYNOPSIS"
.HP
\f5gcloud firebase test android run\fR [\fIARGSPEC\fR] [\fB\-\-app\fR=\fIAPP\fR] [\fB\-\-device\fR=\fIDIMENSION\fR=\fIVALUE\fR,[\fIDIMENSION\fR=\fIVALUE\fR,...]] [\fB\-\-test\fR=\fITEST\fR] [\fB\-\-timeout\fR=\fITIMEOUT\fR] [\fB\-\-type\fR=\fITYPE\fR] [\fB\-\-app\-package\fR=\fIAPP_PACKAGE\fR] [\fB\-\-async\fR] [\fB\-\-no\-auto\-google\-login\fR] [\fB\-\-directories\-to\-pull\fR=[\fIDIR_TO_PULL\fR,...]] [\fB\-\-environment\-variables\fR=[\fIKEY\fR=\fIVALUE\fR,...]] [\fB\-\-obb\-files\fR=\fIOBB_FILE\fR,[\fIOBB_FILE\fR,...]] [\fB\-\-results\-bucket\fR=\fIRESULTS_BUCKET\fR] [\fB\-\-results\-dir\fR=\fIRESULTS_DIR\fR] [\fB\-\-results\-history\-name\fR=\fIRESULTS_HISTORY_NAME\fR] [\fB\-\-test\-package\fR=\fITEST_PACKAGE\fR] [\fB\-\-test\-runner\-class\fR=\fITEST_RUNNER_CLASS\fR] [\fB\-\-test\-targets\fR=\fITEST_TARGET\fR,[\fITEST_TARGET\fR,...]] [\fB\-\-app\-initial\-activity\fR=\fIAPP_INITIAL_ACTIVITY\fR] [\fB\-\-max\-depth\fR=\fIint\fR] [\fB\-\-max\-steps\fR=\fIint\fR] [\fB\-\-robo\-directives\fR=[\fIRESOURCE_NAME\fR=\fIINPUT\fR,...]] [\fB\-\-device\-ids\fR=\fIMODEL_ID\fR,[\fIMODEL_ID\fR,...],\ \fB\-d\fR\ \fIMODEL_ID\fR,[\fIMODEL_ID\fR,...]] [\fB\-\-locales\fR=\fILOCALE\fR,[\fILOCALE\fR,...],\ \fB\-l\fR\ \fILOCALE\fR,[\fILOCALE\fR,...]] [\fB\-\-orientations\fR=\fIORIENTATION\fR,[\fIORIENTATION\fR,...],\ \fB\-o\fR\ \fIORIENTATION\fR,[\fIORIENTATION\fR,...]] [\fB\-\-os\-version\-ids\fR=\fIOS_VERSION_ID\fR,[\fIOS_VERSION_ID\fR,...],\ \fB\-v\fR\ \fIOS_VERSION_ID\fR,[\fIOS_VERSION_ID\fR,...]] [\fB\-\-filter\fR=\fIEXPRESSION\fR] [\fB\-\-limit\fR=\fILIMIT\fR] [\fB\-\-page\-size\fR=\fIPAGE_SIZE\fR] [\fB\-\-sort\-by\fR=[\fIFIELD\fR,...]] [\fB\-\-uri\fR] [\fIGLOBAL\-FLAG\ ...\fR]



.SH "DESCRIPTION"

\fBgcloud firebase test android run\fR invokes and monitors tests in Firebase
Test Lab for Android.

Two main types of tests are currently supported:
.RS 2m
.IP "\(bu" 2m
\fBrobo\fR: runs a smart, automated exploration of the activities in your
Android app which records any installation failures or crashes and builds an
activity map with associated screenshots and video.
.IP "\(bu" 2m
\fBinstrumentation\fR: runs automated unit or integration tests written using a
testing framework. Firebase Test Lab for Android currently supports the
Espresso, Robotium and UI Automator 2.0 testing frameworks.
.RE
.sp

The type of test to run can be specified with the \fB\-\-type\fR flag, although
the type can often be inferred from other flags. Specifically, if the
\fB\-\-test\fR flag is present, the test \fB\-\-type\fR will default to
\f5instrumentation\fR. If \fB\-\-test\fR is not present, then \fB\-\-type\fR
defaults to \f5robo\fR.

All arguments for \fBgcloud firebase test android run\fR may be specified on the
command line and/or within an argument file. Run \fB$ gcloud topic arg\-files\fR
for more information about argument files.



.SH "POSITIONAL ARGUMENTS"

.RS 2m
.TP 2m
[\fIARGSPEC\fR]
An ARG_FILE:ARG_GROUP_NAME pair, where ARG_FILE is the path to a file containing
groups of test arguments in yaml format, and ARG_GROUP_NAME is the particular
yaml object holding a group of arg:value pairs to use. Run \fB$ gcloud topic
arg\-files\fR for more information and examples.


.RE
.sp

.SH "COMMONLY USED FLAGS"

.RS 2m
.TP 2m
\fB\-\-app\fR=\fIAPP\fR
The path to the application binary file. The path may be in the local filesystem
or in Google Cloud Storage using gs:// notation.

.TP 2m
\fB\-\-device\fR=\fIDIMENSION\fR=\fIVALUE\fR,[\fIDIMENSION\fR=\fIVALUE\fR,...]
A list of \f5\fIDIMENSION=VALUE\fR\fR pairs which specify a target device to
test against. This flag may be repeated to specify multiple devices. The four
device dimensions are: \fBmodel\fR, \fBversion\fR, \fBlocale\fR, and
\fBorientation\fR. If any dimensions are omitted, they will use a default value.
The default value can be found with the list command for each dimension, \f5$
gcloud firebase test android <dimension> list\fR. \fB\-\-device\fR is now the
preferred way to specify test devices and may not be used in conjunction with
\fB\-\-devices\-ids\fR, \fB\-\-os\-version\-ids\fR, \fB\-\-locales\fR, or
\fB\-\-orientations\fR. Omitting all of the preceding dimension\-related flags
will run tests against a single device using defaults for all four device
dimensions.

Examples:

.RS 2m
\-\-device model=Nexus6
\-\-device version=23,orientation=portrait
\-\-device model=shamu,version=22,locale=zh_CN,orientation=landscape
.RE

.TP 2m
\fB\-\-test\fR=\fITEST\fR
The path to the binary file containing instrumentation tests. The given path may
be in the local filesystem or in Google Cloud Storage using gs:// notation.

.TP 2m
\fB\-\-timeout\fR=\fITIMEOUT\fR
The max time this test execution can run before it is cancelled (default: 15m).
It does not include any time necessary to prepare and clean up the target
device. The maximum possible testing time is 30m on physical devices and 60m on
virtual devices. The \fITIMEOUT\fR units can be h, m, or s. If no unit is given,
seconds are assumed. Examples:
.RS 2m
.IP "\(em" 2m
\fB\-\-timeout 1h\fR is 1 hour
.IP "\(em" 2m
\fB\-\-timeout 5m\fR is 5 minutes
.IP "\(em" 2m
\fB\-\-timeout 200s\fR is 200 seconds
.IP "\(em" 2m
\fB\-\-timeout 100\fR is 100 seconds
.RE
.RE
.sp

.RS 2m
.TP 2m
\fB\-\-type\fR=\fITYPE\fR
The type of test to run. \fITYPE\fR must be one of: \fBinstrumentation\fR,
\fBrobo\fR.


.RE
.sp

.SH "FLAGS"

.RS 2m
.TP 2m
\fB\-\-app\-package\fR=\fIAPP_PACKAGE\fR
The Java package of the application under test (default: extracted from the APK
manifest).

.TP 2m
\fB\-\-async\fR
Invoke a test asynchronously without waiting for test results.

.TP 2m
\fB\-\-auto\-google\-login\fR
Automatically log into the test device using a preconfigured Google account
before beginning the test. Enabled by default, use
\fB\-\-no\-auto\-google\-login\fR to disable.

.TP 2m
\fB\-\-directories\-to\-pull\fR=[\fIDIR_TO_PULL\fR,...]
A list of paths that will be copied from the device's storage to the designated
results bucket after the test is complete. (ex. \-\-directories\-to\-pull
/sdcard/tempDir1,/data/tempDir2)

.TP 2m
\fB\-\-environment\-variables\fR=[\fIKEY\fR=\fIVALUE\fR,...]
A comma\-separated, key=value, map of environment variables and their desired
values. The environment variables passed here will be mirrored on to the adb run
command. For example, specify \-\-environment\-variables
coverage=true,coverageFile="/sdcard/tempDir/coverage.ec" to enable code coverage
and provide a file path to store the coverage results.

.TP 2m
\fB\-\-obb\-files\fR=\fIOBB_FILE\fR,[\fIOBB_FILE\fR,...]
A list of one or two Android OBB file names which will be copied to each test
device before the tests will run (default: None). Each OBB file name must
conform to the format as specified by Android (e.g.
[main|patch].0300110.com.example.android.obb) and will be installed into
<shared\-storage>/Android/obb/<package\-name>/ on the test device.

.TP 2m
\fB\-\-results\-bucket\fR=\fIRESULTS_BUCKET\fR
The name of a Google Cloud Storage bucket where raw test results will be stored
(default: "test\-lab\-<random\-UUID>"). Note that using a non\-default bucket
will result in billing charges for the storage used.

.TP 2m
\fB\-\-results\-dir\fR=\fIRESULTS_DIR\fR
The name of a \fBunique\fR Google Cloud Storage object within the results bucket
where raw test results will be stored (default: a timestamp with a random
suffix). Caution: if specified, this argument \fBmust be unique\fR for each test
matrix you create, otherwise results from multiple test matrices will be
overwritten or intermingled.

.TP 2m
\fB\-\-results\-history\-name\fR=\fIRESULTS_HISTORY_NAME\fR
The history name for your test results (an arbitrary string label; default: the
application's label from the APK manifest). All tests which use the same history
name will have their results grouped together in the Firebase console in a
time\-ordered test history list.


.RE
.sp

.SH "ANDROID INSTRUMENTATION TEST FLAGS"

.RS 2m
.TP 2m
\fB\-\-test\-package\fR=\fITEST_PACKAGE\fR
The Java package name of the instrumentation test (default: extracted from the
APK manifest).

.TP 2m
\fB\-\-test\-runner\-class\fR=\fITEST_RUNNER_CLASS\fR
The fully\-qualified Java class name of the instrumentation test runner
(default: the last name extracted from the APK manifest).

.TP 2m
\fB\-\-test\-targets\fR=\fITEST_TARGET\fR,[\fITEST_TARGET\fR,...]
A list of one or more instrumentation test targets to be run (default: all
targets). Each target must be fully qualified with the package name or class
name, in one of these formats:
.RS 2m
.IP "\(em" 2m
"package package_name"
.IP "\(em" 2m
"class package_name.class_name"
.IP "\(em" 2m
"class package_name.class_name#method_name".
.RE
.RE
.sp



.SH "ANDROID ROBO TEST FLAGS"

.RS 2m
.TP 2m
\fB\-\-app\-initial\-activity\fR=\fIAPP_INITIAL_ACTIVITY\fR
The initial activity used to start the app during a robo test.

.TP 2m
\fB\-\-max\-depth\fR=\fIint\fR
The maximum depth of the traversal stack a robo test can explore. Needs to be at
least 2 to make Robo explore the app beyond the first activity (default: 50).

.TP 2m
\fB\-\-max\-steps\fR=\fIint\fR
The maximum number of steps/actions a robo test can execute (default: no limit).

.TP 2m
\fB\-\-robo\-directives\fR=[\fIRESOURCE_NAME\fR=\fIINPUT\fR,...]
A comma\-separated, key=value, map of robo_directives for use by Robo test. Each
key should be the Android resource name of a target UI element, and each value
should be the text input for that element. For example, specify
"\-\-robo\-directives username_resource=username,password_resource=password" to
provide custom login credentials for your app. Caution: You should only use
credentials for test accounts that are not associated with real users. For more
information, see
https://firebase.google.com/docs/test\-lab/command\-line#custom_login_and_text_input_with_robo_test.


.RE
.sp

.SH "DEPRECATED DEVICE DIMENSIONS FLAGS"

.RS 2m
.TP 2m
\fB\-\-device\-ids\fR=\fIMODEL_ID\fR,[\fIMODEL_ID\fR,...], \fB\-d\fR \fIMODEL_ID\fR,[\fIMODEL_ID\fR,...]
The list of MODEL_IDs to test against (default: one device model determined by
the Firebase Test Lab device catalog; see TAGS listed by the \f5$ gcloud
firebase test android devices list\fR command).

.TP 2m
\fB\-\-locales\fR=\fILOCALE\fR,[\fILOCALE\fR,...], \fB\-l\fR \fILOCALE\fR,[\fILOCALE\fR,...]
The list of LOCALEs to test against (default: a single locale determined by the
Firebase Test Lab device catalog).

.TP 2m
\fB\-\-orientations\fR=\fIORIENTATION\fR,[\fIORIENTATION\fR,...], \fB\-o\fR \fIORIENTATION\fR,[\fIORIENTATION\fR,...]
The device orientation(s) to test against (default: portrait). \fIORIENTATION\fR
must be one of: \fBportrait\fR, \fBlandscape\fR.

.TP 2m
\fB\-\-os\-version\-ids\fR=\fIOS_VERSION_ID\fR,[\fIOS_VERSION_ID\fR,...], \fB\-v\fR \fIOS_VERSION_ID\fR,[\fIOS_VERSION_ID\fR,...]
The list of OS_VERSION_IDs to test against (default: a version ID determined by
the Firebase Test Lab device catalog).


.RE
.sp

.SH "LIST COMMAND FLAGS"

.RS 2m
.TP 2m
\fB\-\-filter\fR=\fIEXPRESSION\fR
Apply a Boolean filter \fIEXPRESSION\fR to each resource item to be listed. If
the expression evaluates True then that item is listed. For more details and
examples of filter expressions run $ gcloud topic filters. This flag interacts
with other flags that are applied in this order: \fB\-\-flatten\fR,
\fB\-\-sort\-by\fR, \fB\-\-filter\fR, \fB\-\-limit\fR.

.TP 2m
\fB\-\-limit\fR=\fILIMIT\fR
The maximum number of resources to list. The default is \fBunlimited\fR. This
flag interacts with other flags that are applied in this order:
\fB\-\-flatten\fR, \fB\-\-sort\-by\fR, \fB\-\-filter\fR, \fB\-\-limit\fR.

.TP 2m
\fB\-\-page\-size\fR=\fIPAGE_SIZE\fR
Some services group resource list output into pages. This flag specifies the
maximum number of resources per page. The default is determined by the service
if it supports paging, otherwise it is \fBunlimited\fR (no paging). Paging may
be applied before or after \fB\-\-filter\fR and \fB\-\-limit\fR depending on the
service.

.TP 2m
\fB\-\-sort\-by\fR=[\fIFIELD\fR,...]
A comma\-separated list of resource field key names to sort by. The default
order is ascending. Prefix a field with ``~'' for descending order on that
field. This flag interacts with other flags that are applied in this order:
\fB\-\-flatten\fR, \fB\-\-sort\-by\fR, \fB\-\-filter\fR, \fB\-\-limit\fR.

.TP 2m
\fB\-\-uri\fR
Print a list of resource URIs instead of the default output.


.RE
.sp

.SH "GLOBAL FLAGS"

Run \fB$ gcloud help\fR for a description of flags available to all commands.



.SH "EXAMPLES"

To invoke a robo test lasting 100 seconds against the default device
environment, run:

.RS 2m
$ gcloud firebase test android run \-\-app APP_APK \-\-timeout 100s
.RE

When specifying devices to test against, the preferred method is to use the
\-\-device flag. For example, to invoke a robo test against a virtual, generic
MDPI Nexus device in landscape orientation, run:

.RS 2m
$ gcloud firebase test android run \-\-app APP_APK \e
    \-\-device model=NexusLowRes,orientation=landscape
.RE

To invoke an instrumentation test against a physical Nexus 4 device (MODEL_ID:
mako) which is running Android API level 19 in French, run:

.RS 2m
$ gcloud firebase test android run \-\-app APP_APK \-\-test TEST_APK \e
    \-\-device model=mako,version=19,locale=fr
.RE

To test against multiple devices, specify \-\-device more than once:

.RS 2m
$ gcloud firebase test android run \-\-app APP_APK \-\-test TEST_APK \e
    \-\-device model=Nexus4,version=19 \e
    \-\-device model=Nexus4,version=21 \e
    \-\-device model=NexusLowRes,version=25
.RE

You may also use the legacy dimension flags (deprecated) to specify which
devices to use. Firebase Test Lab will run tests against every possible
combination of the listed device dimensions. Note that some combinations of
device models and OS versions may not be valid or available in Test Lab. Any
unsupported combinations of dimensions in the test matrix will be skipped.

For example, to execute a series of 5\-minute robo tests against a very
comprehensive matrix of virtual and physical devices, OS versions, locales and
orientations, run:

.RS 2m
$ gcloud firebase test android run \-\-app APP_APK \-\-timeout 5m \e
    \-\-device\-ids=mako,NexusLowRes,Nexus5,g3,zeroflte \e
    \-\-os\-version\-ids=19,21,22,23,24,25 \-\-locales=en_GB,es,fr,ru,zh \e
    \-\-orientations=portrait,landscape
.RE

The above command will generate a test matrix with a total of 300 test
executions, but only the subset of executions with valid dimension combinations
will actually run your tests.

Controlling Results Storage

By default, Firebase Test Lab stores detailed test results for a limited time in
a Google Cloud Storage bucket provided for you at no charge. If you wish to use
a storage bucket that you control, or if you need to retain detailed test
results for a longer period, use the \fB\-\-results\-bucket\fR option. See
https://firebase.google.com/docs/test\-lab/analyzing\-results#detailed for more
information.

Detailed test result files are prefixed by default with a timestamp and a random
character string. If you require a predictable path where detailed test results
are stored within the results bucket (say, if you have a Continuous Integration
system which does custom post\-processing of test result artifacts), use the
\fB\-\-results\-dir\fR option. \fINote that each test invocation \fBmust\fR have
a unique storage location, so never reuse the same value for
\fB\-\-results\-dir\fR between different test runs\fR. Possible strategies could
include using a UUID or sequence number for \fB\-\-results\-dir\fR.

For example, to run a robo test using a specific Google Cloud Storage location
to hold the raw test results, run:

.RS 2m
$ gcloud firebase test android run \-\-app APP_APK \e
    \-\-results\-bucket=gs://my\-bucket \e
    \-\-results\-dir=my/test/results/<unique\-value>
.RE

To run an instrumentation test and specify a custom name under which the history
of your tests will be collected and displayed in the Firebase console, run:

.RS 2m
$ gcloud firebase test android run \-\-app APP_APK \-\-test TEST_APK \e
    \-\-results\-history\-name='Excelsior App Test History'
.RE

Argument Files

All test arguments for a given test may alternatively be stored in an argument
group within a YAML\-formatted argument file. The \fIARG_FILE\fR may contain one
or more named argument groups, and argument groups may be combined using the
\f5include:\fR attribute (Run \fB$ gcloud topic arg\-files\fR for more
information). The ARG_FILE can easily be shared with colleagues or placed under
source control to ensure consistent test executions.

To run a test using arguments loaded from an ARG_FILE named
\fBexcelsior_args\fR, which contains an argument group named \fBrobo\-args:\fR,
use the following syntax:

.RS 2m
$ gcloud firebase test android run path/to/excelsior_args:robo\-args
.RE
