--recurse=yes
--tag-relative=yes
--fields=+liaS
--extra=+qf

--exclude=.git
--exclude=log
--exclude=tmp
--exclude=vendor
--exclude=build
--exclude=libs
--exclude=$HOME
--exclude=$HOME/.vim


--exclude=vendors
--exclude=*.min.js
--exclude=node_modules

--exclude=.hg
--exclude=libs
--exclude=build
--exclude=dist
--exclude=user-data
--exclude=venv
--exclude=static-cache

--langdef=js
--langmap=js:.js
--regex-js=/(,|(;|^)[ \t ]*(var|let|([A-Za-z_$][A-Za-z0-9_$.]+\.)*))[ \t ]*([A-Za-z0-9_$]+)[ \t ]*=[ \t ]*\{/\5/,object/
--regex-js=/(,|(;|^)[ \t ]*(var|let|([A-Za-z_$][A-Za-z0-9_$.]+\.)*))[ \t ]*([A-Za-z0-9_$]+)[ \t ]*=[ \t ]*function[ \t ]*\(/\5/,function/
--regex-js=/(,|(;|^)[ \t ]*(var|let|([A-Za-z_$][A-Za-z0-9_$.]+\.)*))[ \t ]*([A-Za-z0-9_$]+)[ \t ]*=[ \t ]*\[/\5/,array/
--regex-js=/(,|(;|^)[ \t ]*(var|let|([A-Za-z_$][A-Za-z0-9_$.]+\.)*))[ \t ]*([A-Za-z0-9_$]+)[ \t ]*=[ \t ]*[^"]'[^']*/\5/,string/
--regex-js=/(,|(;|^)[ \t]*(var|let|([A-Za-z_$][A-Za-z0-9_$.]+\.)*))[ \t]*([A-Za-z0-9_$]+)[ \t]*=[ \t]*(true|false)/\5/,boolean/
--regex-js=/(,|(;|^)[ \t]*(var|let|([A-Za-z_$][A-Za-z0-9_$.]+\.)*))[ \t]*([A-Za-z0-9_$]+)[ \t]*=[ \t]*[0-9]+/\5/,number/
--regex-js=/(,|(;|^)[ \t]*(var|let|([A-Za-z_$][A-Za-z0-9_$.]+\.)*))[ \t]*([A-Za-z0-9_$]+)[ \t]*=[ \t]*.+([,;=]|$)/\5/,variable/
--regex-js=/(,|(;|^)[ \t]*(var|let|([A-Za-z_$][A-Za-z0-9_$.]+\.)*))[ \t]*([A-Za-z0-9_$]+)[ \t]*[ \t]*([,;]|$)/\5/,variable/
--regex-js=/function[ \t]+([A-Za-z0-9_$]+)[ \t]*\([^)]*\)/\1/,function/
 
--regex-js=/(,|^)[ \t]*([A-Za-z_$][A-Za-z0-9_$]+)[ \t]*:[ \t]*\{/\2/,object/
--regex-js=/(,|^)[ \t]*([A-Za-z_$][A-Za-z0-9_$]+)[ \t]*:[ \t]*function[ \t]*\(/\2/,function/
--regex-js=/(,|^)[ \t]*([A-Za-z_$][A-Za-z0-9_$]+)[ \t]*:[ \t]*\[/\2/,array/
--regex-js=/(,|^)[ \t]*([A-Za-z_$][A-Za-z0-9_$]+)[ \t]*:[ \t]*[^"]'[^']*/\2/,string/
--regex-js=/(,|^)[ \t]*([A-Za-z_$][A-Za-z0-9_$]+)[ \t]*:[ \t]*(true|false)/\2/,boolean/
--regex-js=/(,|^)[ \t]*([A-Za-z_$][A-Za-z0-9_$]+)[ \t]*:[ \t]*[0-9]+/\2/,number/
--regex-js=/(,|^)[ \t]*([A-Za-z_$][A-Za-z0-9_$]+)[ \t]*:[ \t]*[^=]+([,;]|$)/\2/,variable/

--langdef=coffee
--langmap=coffee:.coffee
--regex-coffee=/(^|=[ \t ])*class ([A-Za-z_][A-Za-z0-9_]+\.)*([A-Za-z_][A-Za-z0-9_]+)( extends ([A-Za-z][A-Za-z0-9_.]*)+ )?$/\3/c,class/
--regex-coffee=/^[ \t ]*(module\.)?(exports\.)?@?(([A-Za-z][A-Za-z0-9_.]*)+):.*[-=]>.*$/\3/m,method/
--regex-coffee=/^[ \t ]*(module\.)?(exports\.)?(([A-Za-z][A-Za-z0-9_.]*)+)[ \t ]*=.*[-=]>.*$/\3/f,function/
--regex-coffee=/^[ \t ]*(([A-Za-z][A-Za-z0-9_.]*)+)[ \t ]*=[^->\n]*$/\1/v,variable/
--regex-coffee=/^[ \t ]*@(([A-Za-z][A-Za-z0-9_.]*)+)[ \t ]*=[^->\n]*$/\1/f,field/
--regex-coffee=/^[ \t ]*@(([A-Za-z][A-Za-z0-9_.]*)+):[^->\n]*$/\1/f,static field/
--regex-coffee=/^[ \t ]*(([A-Za-z][A-Za-z0-9_.]*)+):[^->\n]*$/\1/f,field/
--regex-coffee=/((constructor|initialize):[ \t ]*\()@(([A-Za-z][A-Za-z0-9_.]*)+)([ \t ]*=[ \t ]*[^,)]+)?/\3/f,field/
--regex-coffee=/((constructor|initialize):[ \t ]*\()@(([A-Za-z][A-Za-z0-9_.]*)+)([ \t ]*=[ \t ]*[^,)]+)?(,[ \t ]*@(([A-Za-z][A-Za-z0-9_.]*)+)([ \t ]*=[ \t ]*[^,)]+)?){0}/\8/f,field/
--regex-coffee=/((constructor|initialize):[ \t ]*\()@(([A-Za-z][A-Za-z0-9_.]*)+)([ \t ]*=[ \t ]*[^,)]+)?(,[ \t ]*@(([A-Za-z][A-Za-z0-9_.]*)+)([ \t ]*=[ \t ]*[^,)]+)?){1}/\8/f,field/
--regex-coffee=/((constructor|initialize):[ \t ]*\()@(([A-Za-z][A-Za-z0-9_.]*)+)([ \t ]*=[ \t ]*[^,)]+)?(,[ \t ]*@(([A-Za-z][A-Za-z0-9_.]*)+)([ \t ]*=[ \t ]*[^,)]+)?){2}/\8/f,field/
--regex-coffee=/((constructor|initialize):[ \t ]*\()@(([A-Za-z][A-Za-z0-9_.]*)+)([ \t ]*=[ \t ]*[^,)]+)?(,[ \t ]*@(([A-Za-z][A-Za-z0-9_.]*)+)([ \t ]*=[ \t ]*[^,)]+)?){3}/\8/f,field/
--regex-coffee=/((constructor|initialize):[ \t ]*\()@(([A-Za-z][A-Za-z0-9_.]*)+)([ \t ]*=[ \t ]*[^,)]+)?(,[ \t ]*@(([A-Za-z][A-Za-z0-9_.]*)+)([ \t ]*=[ \t ]*[^,)]+)?){4}/\8/f,field/
--regex-coffee=/((constructor|initialize):[ \t ]*\()@(([A-Za-z][A-Za-z0-9_.]*)+)([ \t ]*=[ \t ]*[^,)]+)?(,[ \t ]*@(([A-Za-z][A-Za-z0-9_.]*)+)([ \t ]*=[ \t ]*[^,)]+)?){5}/\8/f,field/
--regex-coffee=/((constructor|initialize):[ \t ]*\()@(([A-Za-z][A-Za-z0-9_.]*)+)([ \t ]*=[ \t ]*[^,)]+)?(,[ \t ]*@(([A-Za-z][A-Za-z0-9_.]*)+)([ \t ]*=[ \t ]*[^,)]+)?){6}/\8/f,field/
--regex-coffee=/((constructor|initialize):[ \t ]*\()@(([A-Za-z][A-Za-z0-9_.]*)+)([ \t ]*=[ \t ]*[^,)]+)?(,[ \t ]*@(([A-Za-z][A-Za-z0-9_.]*)+)([ \t ]*=[ \t ]*[^,)]+)?){7}/\8/f,field/
--regex-coffee=/((constructor|initialize):[ \t ]*\()@(([A-Za-z][A-Za-z0-9_.]*)+)([ \t ]*=[ \t ]*[^,)]+)?(,[ \t ]*@(([A-Za-z][A-Za-z0-9_.]*)+)([ \t ]*=[ \t ]*[^,)]+)?){8}/\8/f,field/
--regex-coffee=/((constructor|initialize):[ \t ]*\()@(([A-Za-z][A-Za-z0-9_.]*)+)([ \t ]*=[ \t ]*[^,)]+)?(,[ \t ]*@(([A-Za-z][A-Za-z0-9_.]*)+)([ \t ]*=[ \t ]*[^,)]+)?){9}/\8/f,field/

--langdef=css
--langmap=css:.css
--regex-css=/^[ \t]*([^\t {][^{]{1,100})(\t| )*{/\1/d,definition/

--langdef=scss
--langmap=scss:.scss
--regex-scss=/^[ \t]*([^\t {][^{]{1,100})(\t| )*{/| \1/d,definition/

--langdef=sass
--langmap=sass:.scss
--regex-sass=/@mixin[ ]*([^ ({]+)/\1/m,mixin/

--langdef=Clojure
--langmap=Clojure:.clj
--regex-clojure=/\([ \t]*create-ns[ \t]+([-[:alnum:]*+!_:\/.?]+)/\1/n,namespace/
--regex-clojure=/\([ \t]*def[ \t]+([-[:alnum:]*+!_:\/.?]+)/\1/d,definition/
--regex-clojure=/\([ \t]*defn-?[ \t]+([-[:alnum:]*+!_:\/.?]+)/\1/f,function/
--regex-clojure=/\([ \t]*defmacro[ \t]+([-[:alnum:]*+!_:\/.?]+)/\1/m,macro/
--regex-clojure=/\([ \t]*definline[ \t]+([-[:alnum:]*+!_:\/.?]+)/\1/i,inline/
--regex-clojure=/\([ \t]*defmulti[ \t]+([-[:alnum:]*+!_:\/.?]+)/\1/a,multimethod definition/
--regex-clojure=/\([ \t]*defmethod[ \t]+([-[:alnum:]*+!_:\/.?]+)/\1/b,multimethod instance/
--regex-clojure=/\([ \t]*defonce[ \t]+([-[:alnum:]*+!_:\/.?]+)/\1/c,definition (once)/
--regex-clojure=/\([ \t]*defstruct[ \t]+([-[:alnum:]*+!_:\/.?]+)/\1/s,struct/
--regex-clojure=/\([ \t]*intern[ \t]+([-[:alnum:]*+!_:\/.?]+)/\1/v,intern/
--regex-clojure=/\([ \t]*ns[ \t]+([-[:alnum:]*+!_:\/.?]+)/\1/n,namespace/

--langdef=Go
--langmap=Go:.go
--regex-Go=/func([ \t ]+\([^)]+\))?[ \t ]+([a-zA-Z0-9_]+)/\2/d,func/
--regex-Go=/var[ \t ]+([a-zA-Z_][a-zA-Z0-9_]+)/\1/d,var/
--regex-Go=/type[ \t ]+([a-zA-Z_][a-zA-Z0-9_]+)/\1/d,type/

--langdef=scala
--langmap=scala:.scala
--regex-scala=/^[ \t ]*((abstract|final|sealed|implicit|lazy)[ \t ]*)*(private|protected)?[ \t ]*class[ \t ]+([a-zA-Z0-9_]+)/\4/c,classes/
--regex-scala=/^[ \t ]*((abstract|final|sealed|implicit|lazy)[ \t ]*)*(private|protected)?[ \t ]*object[ \t ]+([a-zA-Z0-9_]+)/\4/c,objects/
--regex-scala=/^[ \t ]*((abstract|final|sealed|implicit|lazy)[ \t ]*)*(private|protected)?[ \t ]*case class[ \t ]+([a-zA-Z0-9_]+)/\4/c,case classes/
--regex-scala=/^[ \t ]*((abstract|final|sealed|implicit|lazy)[ \t ]*)*(private|protected)?[ \t ]*case object[ \t ]+([a-zA-Z0-9_]+)/\4/c,case objects/
--regex-scala=/^[ \t ]*((abstract|final|sealed|implicit|lazy)[ \t ]*)*(private|protected)?[ \t ]*trait[ \t ]+([a-zA-Z0-9_]+)/\4/t,traits/
--regex-scala=/^[ \t ]*type[ \t ]+([a-zA-Z0-9_]+)/\1/T,types/
--regex-scala=/^[ \t ]*((abstract|final|sealed|implicit|lazy)[ \t ]*)*def[ \t ]+([a-zA-Z0-9_]+)/\3/m,methods/
--regex-scala=/^[ \t ]*((abstract|final|sealed|implicit|lazy)[ \t ]*)*val[ \t ]+([a-zA-Z0-9_]+)/\3/l,constants/
--regex-scala=/^[ \t ]*((abstract|final|sealed|implicit|lazy)[ \t ]*)*var[ \t ]+([a-zA-Z0-9_]+)/\3/l,variables/
--regex-scala=/^[ \t ]*package[ \t ]+([a-zA-Z0-9_.]+)/\1/p,packages/ 

