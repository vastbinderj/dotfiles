" set mouse if possible
set mouse+=a
if &term =~ '^screen'
  "tmux knows the extended mouse mode
  set ttymouse=xterm2
endif

" Call Pathogen
filetype off
call pathogen#infect('bundle/{}')
call pathogen#helptags()

" Use all Go plugins
filetype plugin indent off
set runtimepath+=$GOROOT/misc/vim
filetype plugin indent on
syntax on

" Set the Map Leader
let mapleader=","

set encoding=utf-8
set gfn=Ubuntu\ Mono\ 12

set tabstop=2
set shiftwidth=2
set expandtab
set softtabstop=2
set smarttab
set hlsearch
set incsearch
set showmatch
set number
set relativenumber
set title
set nobackup
set noswapfile
set history=1000
set undolevels=1000
set wildignore=*.swp,*.bak,*.pyc,*.class
set cursorline
set ruler
set showcmd
set cmdheight=2
set encoding=utf8
set scrolloff=10
set mat=2
" Enable Code Folding
set foldmethod=indent
set foldlevel=99

set laststatus=2
set t_Co=256

" airline settings
let g:airline_powerline_fonts = 1
let g:airline#extensions#whitespace#enabled = 0
let g:airline_theme = "badwolf"

" move around windows with ctrl key
map <c-j> <c-w>j
map <c-k> <c-w>k
map <c-l> <c-w>l
map <c-h> <c-w>h

" Mappings for two-handed save
" insert to normal mode save
inoremap ;d <ESC>:update<CR>
" insert to normal to insert  
inoremap ;f <C-O>:update<CR>
" normal to nomal mode save
nnoremap ;f :update<CR>

" Functions to easily mark and swap windows
function! MarkWindowSwap()
    let g:markedWinNum = winnr()
endfunction

function! DoWindowSwap()
    "Mark destination
    let curNum = winnr()
    let curBuf = bufnr( "%" )
    exe g:markedWinNum . "wincmd w"
    "Switch to source and shuffle dest->source
    let markedBuf = bufnr( "%" )
    "Hide and open so that we aren't prompted and keep history
    exe 'hide buf' curBuf
    "Switch to dest and shuffle source->dest
    exe curNum . "wincmd w"
    "Hide and open so that we aren't prompted and keep history
    exe 'hide buf' markedBuf 
endfunction

nnoremap <silent> <Leader>mw :call MarkWindowSwap()<CR>
nnoremap <silent> <Leader>pw :call DoWindowSwap()<CR>

" map escape to jk
:imap jk <Esc>

" toggle the numbering in the gutter
function! NumberToggle()
  if(&relativenumber == 1)
    set nonumber
    set norelativenumber
  else
    set number
    set relativenumber
  endif
endfunc

nnoremap <C-n> :call NumberToggle()<cr>

" set delimitMate options
set backspace=indent,eol,start
let delimitMate_expand_cr = 2
let delimitMate_expand_space = 1

"Scala Tagbar configuration
let g:tagbar_type_scala = {
    \ 'ctagstype' : 'Scala',
    \ 'kinds'     : [
        \ 'p:packages:1',
        \ 'V:values',
        \ 'v:variables',
        \ 'T:types',
        \ 't:traits',
        \ 'o:objects',
        \ 'a:aclasses',
        \ 'c:classes',
        \ 'r:cclasses',
        \ 'm:methods'
    \ ]
\ }

" Go tagbar config
let g:tagbar_type_go = {
    \ 'ctagstype' : 'go',
    \ 'kinds'     : [
        \ 'p:package',
        \ 'i:imports:1',
        \ 'c:constants',
        \ 'v:variables',
        \ 't:types',
        \ 'n:interfaces',
        \ 'w:fields',
        \ 'e:embedded',
        \ 'm:methods',
        \ 'r:constructor',
        \ 'f:functions'
    \ ],
    \ 'sro' : '.',
    \ 'kind2scope' : {
        \ 't' : 'ctype',
        \ 'n' : 'ntype'
    \ },
    \ 'scope2kind' : {
        \ 'ctype' : 't',
        \ 'ntype' : 'n'
    \ },
    \ 'ctagsbin'  : 'gotags',
    \ 'ctagsargs' : '-sort -silent'
\ }

" Tag path
set tags=./tags,tags;$HOME

" Golang customizations
"
let g:go_bin_path = expand("$HOME/go/bin")

" generate go ctags upon save
au BufWritePost *.go silent! !ctags -R --exclude=*.js,*.html &    
let g:godef_same_file_in_same_window=1                              " when in go, just move the cursor if in same file 
let g:syntastic_go_checkers = ['go','golint']                       " use golint for syntax checking in Go
autocmd FileType go setlocal shiftwidth=8 tabstop=8 softtabstop=8   " set tabstop to 8 for go files
autocmd FileType go setlocal noexpandtab                            " don't expand tabs to spaces for go files
" Go keymaps
" Type Info
au FileType go nmap <Leader>i <Plug>(go-info)
" GoDoc
au FileType go nmap <Leader>gd <Plug>(go-doc)
au Filetype go nmap <Leader>gv <Plug>(go-doc-vertical)
" Build/Run/Test
au FileType go nmap <Leader>r <Plug>(go-run)
au FileType go nmap <Leader>b <Plug>(go-build)
au FileType go nmap <Leader>t <Plug>(go-test)
" GoDef
au FileType go nmap gd <Plug>(go-def)
au FileType go nmap <Leader>ds <Plug>(go-def-split)
au FileType go nmap <Leader>dv <Plug>(go-def-vertical)
au FileType go nmap <Leader>dt <Plug>(go-def-tab)

" mapping for tasks in current file
map <leader>tl <Plug>TaskList
let g:tlWindowPosition = 1                                          " set the window postion below
" mapping for tasks in project
noremap <Leader>tp :noautocmd vimgrep /TODO/j **/**<CR>:cw<CR>      

" Gundo 
map <leader>g :GundoToggle<CR>

"NerdTreeToggle
map <leader>nt <plug>NERDTreeTabsToggle<CR>

" Bind F4 to :TagbarToggle
nnoremap <F4> :TagbarToggle<CR>

" Bind F6 to CTAGS
nnoremap <F6> :!ctags -R --exclude=.git --exclude=log *<CR>

"Fuzzy Finder
nnoremap <C-f><C-f> :FufFile<CR>

" Ack
nnoremap <,a> <Esc>:Ack!

" CTRL-P
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_working_path_mode = 'ra'         " Working Directory
set wildignore+=*/tmp/*,*.so,*.swp,*.zip     " MacOSX/Linux
let g:ctrlp_user_command = 'find %s -type f'
let g:ctrlp_custom_ignore = {
            \ 'dir':  '\v[\/]\.(git|hg|svn)$',
            \ 'file': '\v\.(exe|so|dll)$',
            \ 'link': 'some_bad_symbolic_links',
            \ }

" Pep8 Mapping
let g:pep8_map=',p8'

" Ultisnips
"let g:UltiSnipsUsePythonVersion = 2

" NodeJS Completion Settings
let g:nodejs_complete_config = {
            \ 'js_compl_fn': 'jscomplete#CompleteJS',
            \ 'max_node_compl_len': 15 
            \ }

" Enable Omni complete
if has("autocmd")
    autocmd FileType ruby,eruby set omnifunc=rubycomplete#Complete
    autocmd FileType ruby,eruby let g:rubycomplete_buffer_loading = 1
    autocmd FileType ruby,eruby let g:rubycomplete_classes_in_global = 1
    autocmd FileType ruby,eruby let g:rubycomplete_rails = 1

    autocmd FileType python set omnifunc=pythoncomplete#Complete

    autocmd FileType php let php_sql_query=1
    autocmd FileType php let php_htmlInStrings=1
    autocmd FileType php set omnifunc=phpcomplete#CompletePHP
    autocmd FileType html set omnifunc=htmlcomplete#CompleteTags
    autocmd FileType css set omnifunc=csscomplete#CompleteCSS
    autocmd FileType javascript set omnifunc=javascriptcomplete#CompleteJS

    autocmd FileType c set omnifunc=ccomplete#Complete
endif


"Improve autocomplete menu color
highlight   clear
highlight   Pmenu         ctermfg=0 ctermbg=2
highlight   PmenuSel      ctermfg=0 ctermbg=7
highlight   PmenuSbar     ctermfg=7 ctermbg=0
highlight   PmenuThumb    ctermfg=0 ctermbg=7

" JavaScript 
let g:html_indent_inctags = "html,body,head,tbody"
let g:html_indent_script1 = "inc"
let g:html_indent_style1 = "inc"

" Node.js dictionary 
au FileType javascript set dictionary+=$HOME/.vim/bundle/vim-node/dict/node.dict

" Recompile a Coffee file when saved
au BufWritePost *.coffee silent CoffeeMake! -b | cwindow | redraw!

" jQuery Syntax
au BufRead,BufNewFile jquery.*.js set ft=javascript syntax=jquery

" Solarized stuff
"let g:solarized_termtrans=1
"let g:solarized_contrast='high'
set background=dark
colorscheme lucius
